// Uses library from: https://github.com/perak/quantum-circuit
// range() function is from:  https://stackoverflow.com/questions/8273047/javascript-function-similar-to-python-range
// Implemented BB84 algorithm to Javascript from this python example: https://github.com/Qiskit/qiskit-tutorials/blob/master/community/awards/teach_me_qiskit_2018/quantum_cryptography_qkd/Quantum_Cryptography2.ipynb
function range(e,n,o){if(void 0===n&&(n=e,e=0),void 0===o&&(o=1),o>0&&e>=n||o<0&&e<=n)return[];for(var t=[],r=e;o>0?r<n:r>n;r+=o)t.push(r);return t}function randomStringGen(e){output_list=[],output="";var n=e,o="";for(x of(ceil=Math.ceil(n/10),range(ceil))){for(var t=new QuantumCircuit(10),r=(range(10),0);r<10;r++)t.addGate("h",-1,r),t.addMeasure(r,"c",r);t.run();for(var l=0;l<10;l++)o+=t.getCregBit("c",l);output+=o}return output.slice(0,n)}function makeKey(e,n,o){for(var t="",r=0;r<e.length;r++)e[r]==n[r]&&(t+=o[r]);return t}function functionReplacer(e,n){return"function"==typeof n?n.toString():n}function functionReviver(e,n){if(""===e)return n;if("string"==typeof n){var o=n.match(/function[^\(]*\(([^\)]*)\)[^\{]*{([^\}]*)\}/);if(o){var t=o[1].split(",").map(function(e){return e.replace(/\s+/,"")});return new Function(t,o[2])}}return n}function aliceKeygen(){var e=10,n=[];for(x of range(parseInt(1)))n.push(10);console.log(n);var o=randomStringGen(e);console.log("Alice>> initKey: ",o);var t=randomStringGen(e),r=randomStringGen(e);console.log("Alice>> Alice's rotation string: ",t),console.log("Alice>> Bob's rotation string: ",r);var l=[];for(len of(console.log("NLIST: ",n),n)){if(console.log("LEN: ",len),len<10){var a=o.slice(0,0+len);i=t.slice(0,0+len),r.slice(0,0+len)}else{a=o.slice(0*len,1*len);var i=t.slice(0*len,1*len);r.slice(0*len,1*len)}var c=new QuantumCircuit(len),s=0;for(let e=0;e<a.length;e++){var u=parseInt(a[s]),g=parseInt(i[s]);u>0&&c.addGate("x",-1,s),g>0&&c.addGate("h",-1,s),c.addMeasure(s,"c",s),s+=1}l.push(c.save()),console.log(l),c.run()}var f=makeKey(r,t,o);console.log("Alice>> Bob's RESULT: ",""),console.log("Alice>> Alice's Key: ",f);var v={qcList:l,aliceRotate:t,bobRotate:r,nlist:n};return{Akey:f,LASER:JSON.stringify(v)}}function bobKeygen(e){var n=JSON.parse(e),o=n.qcList,t=n.aliceRotate,r=n.bobRotate,l=n.nlist,a="";console.log("Bob>> AliceRotate: ",t),console.log("Bob>> BobRotate: ",r);var i,c,s=0;for(len of l){c=len<10?r.slice(10*s,10*s+len):r.slice(len*s,len*(s+1));var u=new QuantumCircuit;for(k of(u.load(o[s]),console.warn(u),i=0,c))k=parseInt(k),k>0&&u.addGate("h",-1,i),u.addMeasure(i,"c",i),i+=1;var g=document.getElementById("drawing"),f=u.exportSVG(!0);g.innerHTML=f,u.run(),bobResult_temp="",bobResult_temp+=u.getCreg("c",k).join(""),a+=bobResult_temp,s+=1}console.log("Bob>> Bob's results: ",a);var v=makeKey(r,t,a);return console.log("Bob>> Bob's key: ",v),v}